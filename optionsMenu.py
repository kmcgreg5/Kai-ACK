#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# UI elements generated by wxGlade 0.9.2
# Functionality written by Kai McGregor for use in Kai-ACK
#

import wx
import os
from pathlib import Path
import json
import requests
import urllib3
import re
from pubsub import pub as Publisher
import RuckusLibrary
import sys
from cryptography.fernet import Fernet
import socket

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def resource_path(relative_path): # Get file path of files embeded into exe, there aren't any but its here for future use
    base_path = getattr(sys, '_MEIPASS', os.path.dirname(os.path.abspath(__file__)))
    return os.path.join(base_path, relative_path)

class menuOptionsUI(wx.Frame):
    def __init__(self, *args, **kwds):
        # Initialization Variables
        self.clusterList = []
        self.key = None
        
        kwds["style"] = kwds.get("style", 0) | wx.CAPTION | wx.FRAME_NO_TASKBAR
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((600, 500))
        
        # Left Pane 1
        self.splitterWindow = wx.SplitterWindow(self, wx.ID_ANY)
        self.settingsPaneRight = wx.Panel(self.splitterWindow, wx.ID_ANY)
        self.settingsPaneLeft = wx.Panel(self.splitterWindow, wx.ID_ANY)
        self.userSettingsButton = wx.ToggleButton(self.settingsPaneLeft, wx.ID_ANY, "User")
        self.controllerSettingsButton = wx.ToggleButton(self.settingsPaneLeft, wx.ID_ANY, "Controller")
        self.userSettingsButton.SetValue(True)
        
        # Right Pane 1
        self.mikrotikCheckBox = wx.CheckBox(self.settingsPaneRight, wx.ID_ANY, "Mikrotik:")
        self.mikrotikCheckList = wx.CheckListBox(self.settingsPaneRight, wx.ID_ANY, choices=["Two-Stage Programming", "Downgrade RouterOS", "Run MTAutoscript", "Replace Login File", "Change DDNS Hostname", "Set Password", "Disable Packages", "Upgrade Routerboard Firmware"], style=wx.LB_NO_SB)
        self.routerOSRadioBox = wx.RadioBox(self.settingsPaneRight, wx.ID_ANY, "RouterOS Version:", choices=["mmips", "mmipsbe"], majorDimension=1, style=wx.RA_SPECIFY_ROWS)
        self.apCheckBox = wx.CheckBox(self.settingsPaneRight, wx.ID_ANY, "Access Point:")
        self.apCheckList = wx.CheckListBox(self.settingsPaneRight, wx.ID_ANY, choices=["Override NAF Controller", "Factory Reset AP"], style=wx.LB_NO_SB)
        self.wbCheckBox = wx.CheckBox(self.settingsPaneRight, wx.ID_ANY, "WattBox:")
        self.wbCheckList = wx.CheckListBox(self.settingsPaneRight, wx.ID_ANY, choices=[], style=wx.LB_NO_SB)
        self.miscCheckList = wx.CheckListBox(self.settingsPaneRight, wx.ID_ANY, choices=["Write To Sheets", "Use Timer", "No NAF"], style=wx.LB_NO_SB)
        self.okButton = wx.Button(self.settingsPaneRight, wx.ID_ANY, "OK")
        self.defaultsButton = wx.Button(self.settingsPaneRight, wx.ID_ANY, "Reset to Defaults")
        
        # Left Pane 2
        self.splitterWindow2 = wx.SplitterWindow(self, wx.ID_ANY)
        self.settingsPaneRight2 = wx.Panel(self.splitterWindow2, wx.ID_ANY)
        self.settingsPaneLeft2 = wx.Panel(self.splitterWindow2, wx.ID_ANY)
        self.userSettingsButton2 = wx.ToggleButton(self.settingsPaneLeft2, wx.ID_ANY, "User")
        self.controllerSettingsButton2 = wx.ToggleButton(self.settingsPaneLeft2, wx.ID_ANY, "Controller")
        self.controllerSettingsButton2.SetValue(True)

        # Right Pane 2
        self.usernameTextBox = wx.TextCtrl(self.settingsPaneRight2, wx.ID_ANY, "")
        self.passwordTextBox = wx.TextCtrl(self.settingsPaneRight2, wx.ID_ANY, "", style=wx.TE_PASSWORD)
        self.clusterListBox = wx.ListBox(self.settingsPaneRight2, wx.ID_ANY, choices=[], style=wx.LB_ALWAYS_SB | wx.LB_SINGLE | wx.LB_SORT)
        self.deleteClusterButton = wx.Button(self.settingsPaneRight2, wx.ID_ANY, "Delete Cluster")
        self.useClusterButton = wx.Button(self.settingsPaneRight2, wx.ID_ANY, "Use Cluster")
        self.clusterNameTextBox = wx.TextCtrl(self.settingsPaneRight2, wx.ID_ANY, "")
        self.controlIPTextBox = wx.TextCtrl(self.settingsPaneRight2, wx.ID_ANY, "")
        self.manageIPTextBox1 = wx.TextCtrl(self.settingsPaneRight2, wx.ID_ANY, "IP:Port One")
        self.manageIPTextBox2 = wx.TextCtrl(self.settingsPaneRight2, wx.ID_ANY, "IP Two")
        self.manageIPTextBox3 = wx.TextCtrl(self.settingsPaneRight2, wx.ID_ANY, "IP Three")
        self.manageIPTextBox4 = wx.TextCtrl(self.settingsPaneRight2, wx.ID_ANY, "IP Four")
        self.addClusterButton = wx.Button(self.settingsPaneRight2, wx.ID_ANY, "Add Cluster")
        self.okButton2 = wx.Button(self.settingsPaneRight2, wx.ID_ANY, "OK")

        # Load cluster list variables
        try:
            with open(resource_path('key.key'), 'rb') as file:
                self.key = Fernet(file.read())
        except FileNotFoundError:
            print('Key not found')

        if self.key is not None:
            try:
                with open('cluster.encrypted', 'rb') as file:
                    data = file.read()

                decrypted = self.key.decrypt(data)

                with open(resource_path('cluster.txt'), 'w') as file:
                    file.write(decrypted.decode())

                with open(resource_path('cluster.txt'), 'r') as file:
                    clusterFile = json.load(file)

                x = 0
                while x < len(clusterFile):
                    self.clusterList.append([clusterFile[str(x)]['name'], clusterFile[str(x)]['username'], clusterFile[str(x)]['password'], clusterFile[str(x)]['controlIP'], clusterFile[str(x)]['port'], clusterFile[str(x)]['manageIPs']])
                    self.clusterListBox.Append(clusterFile[str(x)]['name'])
                    x += 1

                print('Cluster list loaded')
            except FileNotFoundError:
                print('Cluster file not found')
        
        self.__set_properties()
        self.__do_layout(1)

        self.userSettingsDefault('e') # set options to default on startup

        self.OK('e') # Fill settings on UI

        #####Binds#####
        # Left Pane Binds
        self.Bind(wx.EVT_TOGGLEBUTTON, self.userSettingsButtonToggle, self.userSettingsButton)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.controllerSettingsButtonToggle, self.controllerSettingsButton)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.userSettingsButtonToggle, self.userSettingsButton2)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.controllerSettingsButtonToggle, self.controllerSettingsButton2)

        # Controller Settings Binds
        self.Bind(wx.EVT_BUTTON, self.addCluster, self.addClusterButton)
        self.Bind(wx.EVT_LISTBOX, self.clusterListSelection, self.clusterListBox)
        self.Bind(wx.EVT_BUTTON, self.deleteClusterListSelection, self.deleteClusterButton)
        self.Bind(wx.EVT_BUTTON, self.useClusterListSelection, self.useClusterButton)
        self.Bind(wx.EVT_BUTTON, self.OK, self.okButton2)

        # User Settings Binds
        self.Bind(wx.EVT_BUTTON, self.OK, self.okButton)
        self.Bind(wx.EVT_BUTTON, self.userSettingsDefault, self.defaultsButton)

    def __set_properties(self):
        self.SetTitle("Advanced Options")

        # Left Pane 1
        self.userSettingsButton.SetMinSize((110, 26))
        self.controllerSettingsButton.SetMinSize((110, 26))
        self.settingsPaneLeft.SetMinSize((110, 456))
        self.settingsPaneLeft.SetBackgroundColour(wx.Colour(255, 255, 255))

        # Left Pane 2
        self.userSettingsButton2.SetMinSize((110, 26))
        self.controllerSettingsButton2.SetMinSize((110, 26))
        self.settingsPaneLeft2.SetMinSize((110, 456))
        self.settingsPaneLeft2.SetBackgroundColour(wx.Colour(255, 255, 255))

        # Right Pane 1
        self.mikrotikCheckBox.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        self.mikrotikCheckBox.SetValue(1)
        self.mikrotikCheckList.SetMinSize((200, -1))
        self.routerOSRadioBox.SetSelection(0)
        self.apCheckBox.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        self.apCheckBox.SetValue(1)
        self.apCheckList.SetMinSize((200, 38))
        self.wbCheckBox.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        self.wbCheckBox.SetValue(1)
        self.wbCheckList.SetMinSize((200, 21))
        self.miscCheckList.SetMinSize((200, 54)) # 38
        self.settingsPaneRight.SetMinSize((474, 456))
        self.settingsPaneRight.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.splitterWindow.SetMinSize((584, 456))
        self.splitterWindow.SetMinimumPaneSize(20)
        self.okButton.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))
        self.defaultsButton.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))

        # Right Pane 2
        self.clusterListBox.SetMinSize((200, 100))
        self.deleteClusterButton.SetMinSize((85, -1))
        self.useClusterButton.SetMinSize((85, -1))
        self.clusterNameTextBox.SetMinSize((-1, 24))
        self.controlIPTextBox.SetMinSize((-1, 24))
        self.settingsPaneRight2.SetMinSize((474, 456))
        self.settingsPaneRight2.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.splitterWindow2.SetMinSize((584, 456))
        self.splitterWindow2.SetMinimumPaneSize(20)
        self.okButton2.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Arial"))

    def __do_layout(self, layoutOption = 1):
        # Settings Pane Layout
        settingsVerticalSizer = wx.BoxSizer(wx.VERTICAL)
        settingsLabel = wx.StaticText(self.settingsPaneLeft, wx.ID_ANY, "Settings", style=wx.ALIGN_CENTER)
        settingsLabel.SetMinSize((110, 16))
        settingsVerticalSizer.Add(settingsLabel, 0, 0, 0)
        settingsStaticLine = wx.StaticLine(self.settingsPaneLeft, wx.ID_ANY)
        settingsStaticLine.SetMinSize((110, 2))
        settingsVerticalSizer.Add(settingsStaticLine, 0, 0, 0)
        settingsVerticalSizer.Add((110, 10), 0, 0, 0)
        settingsVerticalSizer.Add(self.userSettingsButton, 0, 0, 0)
        settingsVerticalSizer.Add((110, 5), 0, 0, 0)
        settingsVerticalSizer.Add(self.controllerSettingsButton, 0, wx.ALL, 0)
        settingsVerticalSizer.Add((110, 364), 0, wx.ALL, 3)
        self.settingsPaneLeft.SetSizer(settingsVerticalSizer)

        # Settings Pane Layout 2
        settingsVerticalSizer2 = wx.BoxSizer(wx.VERTICAL)
        settingsLabel = wx.StaticText(self.settingsPaneLeft2, wx.ID_ANY, "Settings", style=wx.ALIGN_CENTER)
        settingsLabel.SetMinSize((110, 16))
        settingsVerticalSizer2.Add(settingsLabel, 0, 0, 0)
        settingsStaticLine = wx.StaticLine(self.settingsPaneLeft2, wx.ID_ANY)
        settingsStaticLine.SetMinSize((110, 2))
        settingsVerticalSizer2.Add(settingsStaticLine, 0, 0, 0)
        settingsVerticalSizer2.Add((110, 10), 0, 0, 0)
        settingsVerticalSizer2.Add(self.userSettingsButton2, 0, 0, 0)
        settingsVerticalSizer2.Add((110, 5), 0, 0, 0)
        settingsVerticalSizer2.Add(self.controllerSettingsButton2, 0, wx.ALL, 0)
        settingsVerticalSizer2.Add((110, 364), 0, wx.ALL, 3)
        self.settingsPaneLeft2.SetSizer(settingsVerticalSizer2)
        
        # Right Pane 1 Layout
        self.mainSizer = wx.BoxSizer(wx.VERTICAL)
        rightPaneHorizontalSizer = wx.BoxSizer(wx.HORIZONTAL)
        mainRightPaneVerticalSizer = wx.BoxSizer(wx.VERTICAL)
        buttonSizer = wx.BoxSizer(wx.HORIZONTAL)
        miscCheckSizer = wx.BoxSizer(wx.HORIZONTAL)
        miscLabelSizer = wx.BoxSizer(wx.HORIZONTAL)
        wbCheckSizer = wx.BoxSizer(wx.HORIZONTAL)
        wbLabelSizer = wx.BoxSizer(wx.HORIZONTAL)
        apCheckSizer = wx.BoxSizer(wx.HORIZONTAL)
        apLabelSizer = wx.BoxSizer(wx.HORIZONTAL)
        mikrotikCheckSizer = wx.BoxSizer(wx.HORIZONTAL)
        mikrotikLabelSizer = wx.BoxSizer(wx.HORIZONTAL)
        programmingStepsSizer = wx.BoxSizer(wx.HORIZONTAL)
        seperatorStaticLine = wx.StaticLine(self.settingsPaneRight, wx.ID_ANY, style=wx.LI_VERTICAL)
        seperatorStaticLine.SetMinSize((2, 456))
        rightPaneHorizontalSizer.Add(seperatorStaticLine, 0, 0, 0)
        userSettingsLabel = wx.StaticText(self.settingsPaneRight, wx.ID_ANY, "User Settings:", style=wx.ALIGN_CENTER)
        userSettingsLabel.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        mainRightPaneVerticalSizer.Add(userSettingsLabel, 0, wx.EXPAND, 0)
        mainRightPaneVerticalSizer.Add((20, 10), 0, 0, 0)
        programmingStepsSizer.Add((10, 22), 0, 0, 0)
        programmingStepsLabel = wx.StaticText(self.settingsPaneRight, wx.ID_ANY, "Programming Steps:", style=wx.ALIGN_LEFT)
        programmingStepsLabel.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        programmingStepsSizer.Add(programmingStepsLabel, 0, 0, 0)
        mainRightPaneVerticalSizer.Add(programmingStepsSizer, 1, 0, 0)
        mainRightPaneVerticalSizer.Add((20, 5), 0, 0, 0)
        mikrotikLabelSizer.Add((20, 22), 0, 0, 0)
        mikrotikLabelSizer.Add(self.mikrotikCheckBox, 0, 0, 0)
        mainRightPaneVerticalSizer.Add(mikrotikLabelSizer, 1, wx.EXPAND, 0)
        mikrotikCheckSizer.Add((50, 22), 0, 0, 0)
        mikrotikCheckSizer.Add(self.mikrotikCheckList, 0, 0, 0)
        mikrotikCheckSizer.Add((40, 20), 0, 0, 0)
        mikrotikCheckSizer.Add(self.routerOSRadioBox, 0, wx.ALIGN_CENTER, 0)
        mainRightPaneVerticalSizer.Add(mikrotikCheckSizer, 1, wx.EXPAND, 0)
        mainRightPaneVerticalSizer.Add((20, 5), 0, 0, 0)
        mikrotikStaticLine = wx.StaticLine(self.settingsPaneRight, wx.ID_ANY)
        mainRightPaneVerticalSizer.Add(mikrotikStaticLine, 0, wx.EXPAND, 0)
        mainRightPaneVerticalSizer.Add((20, 5), 0, 0, 0)
        apLabelSizer.Add((20, 22), 0, 0, 0)
        apLabelSizer.Add(self.apCheckBox, 0, 0, 0)
        mainRightPaneVerticalSizer.Add(apLabelSizer, 1, wx.EXPAND, 0)
        apCheckSizer.Add((50, 22), 0, 0, 0)
        apCheckSizer.Add(self.apCheckList, 0, 0, 0)
        mainRightPaneVerticalSizer.Add(apCheckSizer, 1, wx.EXPAND, 0)
        mainRightPaneVerticalSizer.Add((20, 5), 0, 0, 0)
        apStaticLine = wx.StaticLine(self.settingsPaneRight, wx.ID_ANY)
        mainRightPaneVerticalSizer.Add(apStaticLine, 0, wx.EXPAND, 0)
        mainRightPaneVerticalSizer.Add((20, 5), 0, 0, 0)
        wbLabelSizer.Add((20, 22), 0, 0, 0)
        wbLabelSizer.Add(self.wbCheckBox, 0, 0, 0)
        mainRightPaneVerticalSizer.Add(wbLabelSizer, 1, wx.EXPAND, 0)
        wbCheckSizer.Add((50, 22), 0, 0, 0)
        wbCheckSizer.Add(self.wbCheckList, 0, 0, 0)
        mainRightPaneVerticalSizer.Add(wbCheckSizer, 1, wx.EXPAND, 0)
        mainRightPaneVerticalSizer.Add((20, 5), 0, 0, 0)
        wbStaticLine = wx.StaticLine(self.settingsPaneRight, wx.ID_ANY)
        mainRightPaneVerticalSizer.Add(wbStaticLine, 0, wx.EXPAND, 0)
        mainRightPaneVerticalSizer.Add((20, 5), 0, 0, 0)
        miscLabelSizer.Add((20, 22), 0, 0, 0)
        miscOptionsLabel = wx.StaticText(self.settingsPaneRight, wx.ID_ANY, "Miscellaneous:")
        miscOptionsLabel.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        miscLabelSizer.Add(miscOptionsLabel, 0, 0, 0)
        mainRightPaneVerticalSizer.Add(miscLabelSizer, 1, wx.EXPAND, 0)
        miscCheckSizer.Add((50, 22), 0, 0, 0)
        miscCheckSizer.Add(self.miscCheckList, 0, 0, 0)
        mainRightPaneVerticalSizer.Add(miscCheckSizer, 1, wx.EXPAND, 0)
        buttonSizer.Add((260, 20), 0, wx.EXPAND, 0)
        buttonSizer.Add(self.okButton, 0, wx.ALIGN_RIGHT, 0)
        buttonSizer.Add((5, 20), 0, 0, 0)
        buttonSizer.Add(self.defaultsButton, 0, wx.ALIGN_RIGHT, 0)
        mainRightPaneVerticalSizer.Add(buttonSizer, 1, wx.EXPAND, 0)
        mainRightPaneVerticalSizer.Add((20, 5), 0, 0, 0)
        rightPaneHorizontalSizer.Add(mainRightPaneVerticalSizer, 1, wx.EXPAND, 0)
        self.settingsPaneRight.SetSizer(rightPaneHorizontalSizer)
        self.splitterWindow.SplitVertically(self.settingsPaneLeft, self.settingsPaneRight)

        # Right Pane 2 Layout
        rightPaneHorizontalSizer2 = wx.BoxSizer(wx.HORIZONTAL)
        mainRightPaneVerticalSizer2 = wx.BoxSizer(wx.VERTICAL)
        buttonSizer2 = wx.BoxSizer(wx.HORIZONTAL)
        clusterInfoHorizontalSizer = wx.BoxSizer(wx.HORIZONTAL)
        addClusterVerticalSizer = wx.BoxSizer(wx.VERTICAL)
        addClusterButtonHorizontalSizer = wx.BoxSizer(wx.HORIZONTAL)
        manageIPTextBox2HorizontalSizer = wx.BoxSizer(wx.HORIZONTAL)
        manageIPTextBox1HorizontalSizer = wx.BoxSizer(wx.HORIZONTAL)
        controlIPHorizontalSizer = wx.BoxSizer(wx.HORIZONTAL)
        clusterNameHorizontalSizer = wx.BoxSizer(wx.HORIZONTAL)
        addClusterLabelHorizontalSizer = wx.BoxSizer(wx.HORIZONTAL)
        clusterListVerticalSizer = wx.BoxSizer(wx.VERTICAL)
        clusterListButtonHorizontalSizer = wx.BoxSizer(wx.HORIZONTAL)
        clusterListHorizontalSizer = wx.BoxSizer(wx.HORIZONTAL)
        clusterListLabelHorizontalSizer = wx.BoxSizer(wx.HORIZONTAL)
        clusterInfoLabelHorizontalSizer = wx.BoxSizer(wx.HORIZONTAL)
        passwordLabelHorizontalSizer = wx.BoxSizer(wx.HORIZONTAL)
        usernameLabelHorizontalSizer = wx.BoxSizer(wx.HORIZONTAL)
        loginInfoHorizontalSizer = wx.BoxSizer(wx.HORIZONTAL)
        seperatorStaticLine = wx.StaticLine(self.settingsPaneRight2, wx.ID_ANY, style=wx.LI_VERTICAL)
        seperatorStaticLine.SetMinSize((2, 456))
        rightPaneHorizontalSizer2.Add(seperatorStaticLine, 0, 0, 0)
        userSettingsLabel = wx.StaticText(self.settingsPaneRight2, wx.ID_ANY, "Controller Settings:", style=wx.ALIGN_CENTER)
        userSettingsLabel.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        mainRightPaneVerticalSizer2.Add(userSettingsLabel, 0, wx.EXPAND, 0)
        mainRightPaneVerticalSizer2.Add((20, 10), 0, 0, 0)
        loginInfoHorizontalSizer.Add((10, 22), 0, 0, 0)
        loginInfoLabel = wx.StaticText(self.settingsPaneRight2, wx.ID_ANY, "Login Information:", style=wx.ALIGN_LEFT)
        loginInfoLabel.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        loginInfoHorizontalSizer.Add(loginInfoLabel, 0, 0, 0)
        mainRightPaneVerticalSizer2.Add(loginInfoHorizontalSizer, 1, 0, 0)
        mainRightPaneVerticalSizer2.Add((20, 5), 0, 0, 0)
        usernameLabel = wx.StaticText(self.settingsPaneRight2, wx.ID_ANY, "User Name:", style=wx.ALIGN_CENTER)
        usernameLabel.SetMinSize((90, -1))
        usernameLabelHorizontalSizer.Add(usernameLabel, 0, 0, 0)
        usernameLabelHorizontalSizer.Add(self.usernameTextBox, 0, 0, 0)
        mainRightPaneVerticalSizer2.Add(usernameLabelHorizontalSizer, 1, wx.EXPAND, 0)
        passwordLabel = wx.StaticText(self.settingsPaneRight2, wx.ID_ANY, "Password:", style=wx.ALIGN_CENTER)
        passwordLabel.SetMinSize((90, -1))
        passwordLabelHorizontalSizer.Add(passwordLabel, 0, 0, 0)
        passwordLabelHorizontalSizer.Add(self.passwordTextBox, 0, 0, 0)
        mainRightPaneVerticalSizer2.Add(passwordLabelHorizontalSizer, 1, wx.EXPAND, 0)
        mainRightPaneVerticalSizer2.Add((20, 5), 0, 0, 0)
        loginStaticLine = wx.StaticLine(self.settingsPaneRight2, wx.ID_ANY)
        mainRightPaneVerticalSizer2.Add(loginStaticLine, 0, wx.EXPAND, 0)
        mainRightPaneVerticalSizer2.Add((20, 5), 0, 0, 0)
        clusterInfoLabelHorizontalSizer.Add((10, 22), 0, 0, 0)
        clusterInfoLabel = wx.StaticText(self.settingsPaneRight2, wx.ID_ANY, "Cluster Information:", style=wx.ALIGN_LEFT)
        clusterInfoLabel.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        clusterInfoLabelHorizontalSizer.Add(clusterInfoLabel, 0, 0, 0)
        mainRightPaneVerticalSizer2.Add(clusterInfoLabelHorizontalSizer, 1, wx.EXPAND, 0)
        clusterListLabelHorizontalSizer.Add((20, 22), 0, 0, 0)
        clusterListLabel = wx.StaticText(self.settingsPaneRight2, wx.ID_ANY, "Cluster List:", style=wx.ALIGN_CENTER)
        clusterListLabel.SetMinSize((200, -1))
        clusterListLabelHorizontalSizer.Add(clusterListLabel, 0, 0, 0)
        mainRightPaneVerticalSizer2.Add(clusterListLabelHorizontalSizer, 1, wx.EXPAND, 0)
        clusterListHorizontalSizer.Add((20, 20), 0, 0, 0)
        clusterListHorizontalSizer.Add(self.clusterListBox, 0, 0, 0)
        clusterListVerticalSizer.Add(clusterListHorizontalSizer, 1, 0, 0)
        clusterListVerticalSizer.Add((20, 5), 0, 0, 0)
        clusterListButtonHorizontalSizer.Add((30, 20), 0, 0, 0)
        clusterListButtonHorizontalSizer.Add(self.deleteClusterButton, 0, 0, 0)
        clusterListButtonHorizontalSizer.Add((10, 20), 0, 0, 0)
        clusterListButtonHorizontalSizer.Add(self.useClusterButton, 0, 0, 0)
        clusterListVerticalSizer.Add(clusterListButtonHorizontalSizer, 1, 0, 0)
        clusterInfoHorizontalSizer.Add(clusterListVerticalSizer, 1, 0, 0)
        addClusterLabelHorizontalSizer.Add((30, 20), 0, 0, 0)
        addClusterLabel = wx.StaticText(self.settingsPaneRight2, wx.ID_ANY, "Add a Cluster:", style=wx.ALIGN_CENTER)
        addClusterLabel.SetMinSize((195, 22))
        addClusterLabelHorizontalSizer.Add(addClusterLabel, 0, 0, 0)
        addClusterVerticalSizer.Add(addClusterLabelHorizontalSizer, 1, 0, 0)
        clusterNameLabel = wx.StaticText(self.settingsPaneRight2, wx.ID_ANY, "Name:", style=wx.ALIGN_CENTER)
        clusterNameLabel.SetMinSize((95, 24))
        clusterNameHorizontalSizer.Add(clusterNameLabel, 0, 0, 0)
        clusterNameHorizontalSizer.Add((5, 20), 0, 0, 0)
        clusterNameHorizontalSizer.Add(self.clusterNameTextBox, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        addClusterVerticalSizer.Add(clusterNameHorizontalSizer, 1, 0, 0)
        controlIPLabel = wx.StaticText(self.settingsPaneRight2, wx.ID_ANY, "Control IP:", style=wx.ALIGN_CENTER)
        controlIPLabel.SetMinSize((95, 24))
        controlIPHorizontalSizer.Add(controlIPLabel, 0, 0, 0)
        controlIPHorizontalSizer.Add((5, 20), 0, 0, 0)
        controlIPHorizontalSizer.Add(self.controlIPTextBox, 0, 0, 0)
        addClusterVerticalSizer.Add(controlIPHorizontalSizer, 1, 0, 0)
        manageIPLabel = wx.StaticText(self.settingsPaneRight2, wx.ID_ANY, "Management IPs:", style=wx.ALIGN_CENTER)
        manageIPLabel.SetMinSize((255, -1))
        addClusterVerticalSizer.Add(manageIPLabel, 0, 0, 0)
        addClusterVerticalSizer.Add((20, 5), 0, 0, 0)
        manageIPTextBox1HorizontalSizer.Add((10, 20), 0, 0, 0)
        manageIPTextBox1HorizontalSizer.Add(self.manageIPTextBox1, 0, 0, 0)
        manageIPTextBox1HorizontalSizer.Add((5, 20), 0, 0, 0)
        manageIPTextBox1HorizontalSizer.Add(self.manageIPTextBox2, 0, 0, 0)
        manageIPTextBox1HorizontalSizer.Add((20, 20), 0, 0, 0)
        addClusterVerticalSizer.Add(manageIPTextBox1HorizontalSizer, 1, 0, 0)
        addClusterVerticalSizer.Add((20, 3), 0, 0, 0)
        manageIPTextBox2HorizontalSizer.Add((10, 20), 0, 0, 0)
        manageIPTextBox2HorizontalSizer.Add(self.manageIPTextBox3, 0, 0, 0)
        manageIPTextBox2HorizontalSizer.Add((5, 20), 0, 0, 0)
        manageIPTextBox2HorizontalSizer.Add(self.manageIPTextBox4, 0, 0, 0)
        manageIPTextBox2HorizontalSizer.Add((20, 20), 0, 0, 0)
        addClusterVerticalSizer.Add(manageIPTextBox2HorizontalSizer, 1, 0, 0)
        addClusterVerticalSizer.Add((20, 5), 0, 0, 0)
        addClusterButtonHorizontalSizer.Add((80, 20), 0, 0, 0)
        addClusterButtonHorizontalSizer.Add(self.addClusterButton, 0, 0, 0)
        addClusterVerticalSizer.Add(addClusterButtonHorizontalSizer, 1, 0, 0)
        clusterInfoHorizontalSizer.Add(addClusterVerticalSizer, 1, 0, 0)
        mainRightPaneVerticalSizer2.Add(clusterInfoHorizontalSizer, 1, wx.EXPAND, 0)
        mainRightPaneVerticalSizer2.Add((20, 60), 0, 0, 0)
        buttonSizer2.Add((375, 20), 0, wx.EXPAND, 0)
        buttonSizer2.Add(self.okButton2, 0, wx.ALIGN_RIGHT, 0)
        buttonSizer2.Add((5, 20), 0, 0, 0)
        mainRightPaneVerticalSizer2.Add(buttonSizer2, 1, 0, 0)
        mainRightPaneVerticalSizer2.Add((20, 5), 0, 0, 0)
        rightPaneHorizontalSizer2.Add(mainRightPaneVerticalSizer2, 1, wx.EXPAND, 0)
        self.settingsPaneRight2.SetSizer(rightPaneHorizontalSizer2)
        self.splitterWindow2.SplitVertically(self.settingsPaneLeft2, self.settingsPaneRight2)

        # Main Sizer
        self.mainSizer.Add(self.splitterWindow, 1, 0, 0)
        self.splitterWindow2.Hide()
        self.mainSizer.Add(self.splitterWindow2, 1, 0, 0)
        self.SetSizer(self.mainSizer)
        self.Layout()

    # Left Pane Functions
    def userSettingsButtonToggle(self, event): # Toggles between User Settings and Controller Settings
        state = self.splitterWindow2.IsShown()
        if state is True:
            self.splitterWindow2.Hide()
            self.splitterWindow.Show()
            self.Layout()
            self.controllerSettingsButton.SetValue(False)
        else:
            self.userSettingsButton.SetValue(True)

    def controllerSettingsButtonToggle(self, event): # Toggles between User Settings and Controller Settings
        state = self.splitterWindow.IsShown()
        if state is True:
            self.splitterWindow.Hide()
            self.splitterWindow2.Show()
            self.Layout()
            self.userSettingsButton2.SetValue(False)
        else:
            self.controllerSettingsButton2.SetValue(True)

    # User Settings Functions
    def loadOptions(self, optionsList, username, password):
        # Set username and password values
        if username is not None or password is not None:
            self.usernameTextBox.SetValue(username)
            self.passwordTextBox.SetValue(password)
        
        # Set All items False
        self.mikrotikCheckBox.SetValue(False)
        for item in self.mikrotikCheckList.GetCheckedItems():
            self.mikrotikCheckList.Check(item, check=False)
        self.routerOSRadioBox.SetSelection(1)
        self.apCheckBox.SetValue(False)
        for item in self.apCheckList.GetCheckedItems():
            self.apCheckList.Check(item, check=False)
        self.wbCheckBox.SetValue(False)
        for item in self.wbCheckList.GetCheckedItems():
            self.wbCheckList.Check(item, check=False)
        for item in self.miscCheckList.GetCheckedItems():
            self.miscCheckList.Check(item, check=False)
        mtCheckList = []
        apCheckList = []
        miscCheckList = []
        if optionsList['Autoscript'] is True:
            mtCheckList.append(2)
        if optionsList['Dynu'] is True:
            mtCheckList.append(4)
        if optionsList['Downgrade'] is True:
            mtCheckList.append(1)
        if optionsList['Login'] is True:
            mtCheckList.append(3)
        if optionsList['Password'] is True:
            mtCheckList.append(5)
        if optionsList['Routerboard'] is True:
            mtCheckList.append(7)
        if optionsList['Wattbox'] is True:
            self.wbCheckBox.SetValue(True)
        if optionsList['Packages'] is True:
            mtCheckList.append(6)
        if optionsList['AP'] is True:
            self.apCheckBox.SetValue(True)
        if optionsList['2Stage'] is True:
            mtCheckList.append(0)
        if optionsList['Write'] is True:
            miscCheckList.append(0)
        if optionsList['Mikrotik'] is True:
            self.mikrotikCheckBox.SetValue(True)
        if optionsList['Controller'] is True:
            apCheckList.append(0)
        if optionsList['Timer'] is True:
            miscCheckList.append(1)
        if optionsList['ResetAP'] is True:
            apCheckList.append(1)
        if optionsList['RouterOSVersion'] == 'mmips':
            self.routerOSRadioBox.SetSelection(0)
        if optionsList['No NAF'] is True:
            miscCheckList.append(2)

        self.mikrotikCheckList.SetCheckedItems(mtCheckList)
        self.apCheckList.SetCheckedItems(apCheckList)
        self.miscCheckList.SetCheckedItems(miscCheckList)
            
        
    def OK(self, event):
        # Send Publisher message to sync options
        optionsList = {'Autoscript': False,
                        'Dynu': False,
                        'Downgrade': False,
                        'Login': False,
                        'Password': False,
                        'Routerboard': False,
                        'Wattbox': False,
                        'Packages': False,
                        'AP': False,
                        '2Stage': False,
                        'Write': False,
                        'Refurb': False,
                        'Mikrotik': False,
                        'Controller': False,
                        'Timer': False,
                        'ResetAP': False,
                        'RouterOSVersion': 'mmips',
                        'No NAF': False}

        optionsList['Mikrotik'] = self.mikrotikCheckBox.GetValue()
        if len(self.mikrotikCheckList.GetCheckedItems()) != 0:
            for item in self.mikrotikCheckList.GetCheckedItems():
                if item == 0:
                    optionsList['2Stage'] = True
                elif item == 1:
                    optionsList['Downgrade'] = True
                elif item == 2:
                    optionsList['Autoscript'] = True
                elif item == 3:
                    optionsList['Login'] = True
                elif item == 4:
                    optionsList['Dynu'] = True
                elif item == 5:
                    optionsList['Password'] = True
                elif item == 6:
                    optionsList['Packages'] = True
                elif item == 7:
                    optionsList['Routerboard'] = True

        optionsList['AP'] = self.apCheckBox.GetValue()
        if len(self.apCheckList.GetCheckedItems()) != 0:
            for item in self.apCheckList.GetCheckedItems():
                if item == 0:
                    optionsList['Controller'] = True
                if item == 1:
                    optionsList['ResetAP'] = True

        optionsList['Wattbox'] = self.wbCheckBox.GetValue()
        if len(self.wbCheckList.GetCheckedItems()) != 0:
            for item in self.wbCheckList.GetCheckedItems():
                pass # Nothing in list currently

        if len(self.miscCheckList.GetCheckedItems()) != 0:
            for item in self.miscCheckList.GetCheckedItems():
                if item == 0:
                    optionsList['Write'] = True
                if item == 1:
                    optionsList['Timer'] = True
                if item == 2:
                    optionsList['No NAF'] = True

        routerOSVersion = self.routerOSRadioBox.GetSelection()       
        if routerOSVersion == 1:
            optionsList['RouterOSVersion'] = 'mmipsbe'

        username = self.usernameTextBox.GetValue().strip()
        password = self.passwordTextBox.GetValue().strip()

        Publisher.sendMessage('optionsList', optionsList = optionsList, username = username, password = password)

        self.Hide()

    def userSettingsDefault(self, event): # Sets user settings back to default, doesnt confirm them
        self.usernameTextBox.SetValue('')
        self.passwordTextBox.SetValue('')
        
        self.mikrotikCheckBox.SetValue(True)
        x = 0
        while x < 8: # 8 Items
            self.mikrotikCheckList.Check(x, check=False)
            x += 1
            
        self.mikrotikCheckList.SetCheckedItems([0,3,4,5])

        self.apCheckBox.SetValue(True)
        x = 0
        while x < 2: # 2 Items
            self.apCheckList.Check(x, check=False)
            x += 1

        self.wbCheckBox.SetValue(True)
        x = 0
        while x < 0: # 0 Items
            self.wbCheckList.Check(x, check=False)
            x += 1

        x = 0
        while x < 3: # 3 Items
            self.miscCheckList.Check(x, check=False)
            x += 1

        self.miscCheckList.SetCheckedItems([0])

        self.routerOSRadioBox.SetSelection(0)

    # Controller Settings Functions
    def addCluster(self, event):
        message = ''
        if self.clusterNameTextBox.GetValue().strip() == '':
            message = message + 'No cluster name entered\n'
        else:
            for item in self.clusterList:
                if item[0] == self.clusterNameTextBox.GetValue().strip():
                    message = message + 'This cluster name is already in use\n'
        if self.controlIPTextBox.GetValue().strip() == '':
            message = message + 'No control IP entered\n'
        else:
            if re.match('\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}', self.controlIPTextBox.GetValue().strip()) is None:
                message = message + 'Wrong control IP format\n'
        if (self.manageIPTextBox1.GetValue().strip() != 'IP:Port One' or self.manageIPTextBox2.GetValue().strip() != 'IP Two' or self.manageIPTextBox3.GetValue().strip() != 'IP Three' or self.manageIPTextBox4.GetValue().strip() != 'IP Four') is False:
            message = message + 'At least one management IP must be entered'

        if message != '':
            dlg = wx.MessageDialog(None, message, 'Error', wx.OK)
            dlg.ShowModal()
            dlg.Destroy()
            return None

        ips = []
        port = '8443'
        if self.manageIPTextBox1.GetValue().strip() != 'IP:Port One' and self.manageIPTextBox1.GetValue().strip() != '':
            ip = self.manageIPTextBox1.GetValue().strip()
            x = 0
            while x < len(ip):
                if ip[x] == ':':
                    port = ip[x+1:]
                    ip = ip[:x]
                    break
                x += 1
            ips.append(ip)
        if self.manageIPTextBox2.GetValue().strip() != 'IP Two' and self.manageIPTextBox2.GetValue().strip() != '':
            ip = self.manageIPTextBox2.GetValue().strip()
            x = 0
            while x < len(ip):
                if ip[x] == ':':
                    port = ip[x+1:]
                    ip = ip[:x]
                    break
                x += 1
            ips.append(ip)
        if self.manageIPTextBox3.GetValue().strip() != 'IP Three' and self.manageIPTextBox3.GetValue().strip() != '':
            ip = self.manageIPTextBox3.GetValue().strip()
            x = 0
            while x < len(ip):
                if ip[x] == ':':
                    port = ip[x+1:]
                    ip = ip[:x]
                    break
                x += 1
            ips.append(ip)
        if self.manageIPTextBox4.GetValue().strip() != 'IP Four' and self.manageIPTextBox4.GetValue().strip() != '':
            ip = self.manageIPTextBox4.GetValue().strip()
            x = 0
            while x < len(ip):
                if ip[x] == ':':
                    port = ip[x+1:]
                    ip = ip[:x]
                    break
                x += 1
            ips.append(ip)

        port = port.strip()
        username = self.usernameTextBox.GetValue().strip()
        password = self.passwordTextBox.GetValue().strip()
        success = True
        loginInitializeCookies = {
            'Set-Cookie:"JSESSIONID': '{JSESSIONID}"',
            'Path': '/wsg'
        }
        loginRequestParameters = (
            ('username', username),
            ('password', password),
            ('apiVersions', '"v6_1"'),
            ('timeZoneUtcOffset', '"-04:00"'),
        )
        loginRequestBody = {
            'username': username,
            'password': password,
            'apiVersions': [
                'v6_1'
            ],
            'timeZoneUtvOffset': '-04:00'
        }
        universalHeaders = {
            'Content-Type': 'application/json;charset=UTF-8'
        }
        universalCookies = {
            'Cookie': 'JSESSIONID={JSESSIONID}'
        }
        # login to first ip and get list of management IPs to compare to other ip values
        for ip in ips:
            with requests.session() as sessionID:
                try:
                    loginRequest = sessionID.post('https://' + ip + ':' + port + '/wsg/api/public/v6_1/session', params=loginRequestParameters, cookies=loginInitializeCookies, data=json.dumps(loginRequestBody), verify=False)
                    if loginRequest.status_code == 200:
                        print('Logged into Ruckus controller at ' + ip)
                        logoutRequest = sessionID.delete('https://' + ip + ':' + port + '/wsg/api/public/v6_1/session', headers=universalHeaders, cookies=universalCookies, verify=False)
                        print('Logged out of Ruckus Controller at ' + ip)
                    elif loginRequest.status_code == 401:
                        print('Authorization incorrect at ' + ip)
                        success = False
                    else:
                        print(json.dumps(loginRequest.json(), indent=4))
                        success = False
                except (socket.gaierror, requests.exceptions.ConnectionError, UnboundLocalError):
                    print('Didn\'t recieve connection to controller at ' + ip)
                    success = False
            
        if success is True:
            self.clusterList.append([self.clusterNameTextBox.GetValue().strip(), username, password, self.controlIPTextBox.GetValue().strip(), port, ips])
            clusterDict = {}
            x = 0
            for item in self.clusterList: # create dictionary to write
                clusterDict[str(x)]= {'name': item[0], 'username': item[1], 'password': item[2], 'controlIP': item[3], 'port': item[4], 'manageIPs': item[5]}
                x += 1

            with open(resource_path('cluster.txt'), 'w') as file: # Write to file
                json.dump(clusterDict, file)

            with open('cluster.encrypted', 'wb') as file:
                with open(resource_path('cluster.txt'), 'r') as file2:
                    file.write(self.key.encrypt(file2.read().encode()))

            self.clusterListBox.Append(self.clusterList[len(self.clusterList)-1][0]) # add to list box
            
            dlg = wx.MessageDialog(None, self.clusterList[len(self.clusterList)-1][0] + ' Added', 'Success', wx.OK)
            dlg.ShowModal()
            dlg.Destroy()
        else:
            dlg = wx.MessageDialog(None, self.clusterNameTextBox.GetValue().strip() + ' Management IP(s) did not respond', 'Error', wx.OK)
            dlg.ShowModal()
            dlg.Destroy()

    def clusterListSelection(self, event):
        selection = self.clusterListBox.GetString(self.clusterListBox.GetSelection())
        self.manageIPTextBox1.SetValue('IP:Port One')
        self.manageIPTextBox2.SetValue('IP Two')
        self.manageIPTextBox3.SetValue('IP Three')
        self.manageIPTextBox4.SetValue('IP Four')
        x = 0
        for item in self.clusterList:
            if selection == item[0]:
                self.clusterNameTextBox.SetValue(item[0])
                self.controlIPTextBox.SetValue(item[3])
                y = 0
                while y < len(item[5]):
                    if y == 0:
                        self.manageIPTextBox1.SetValue(item[5][0] + ':' + item[4])
                    elif y == 1:
                        self.manageIPTextBox2.SetValue(item[5][1])
                    elif y == 2:
                        self.manageIPTextBox3.SetValue(item[5][2])
                    elif y == 3:
                        self.manageIPTextBox4.SetValue(item[5][3])
                    y += 1
                break
            x += 1

    def deleteClusterListSelection(self, event):
        selectionIndex = self.clusterListBox.GetSelection()
        if selectionIndex != -1:
            selectionString = self.clusterListBox.GetString(selectionIndex)
            self.clusterListBox.Delete(selectionIndex)
            self.clusterNameTextBox.SetValue('')
            self.controlIPTextBox.SetValue('')
            self.manageIPTextBox1.SetValue('IP:Port One')
            self.manageIPTextBox2.SetValue('IP Two')
            self.manageIPTextBox3.SetValue('IP Three')
            self.manageIPTextBox4.SetValue('IP Four')

            x = 0
            while x < len(self.clusterList):
                if selectionString == self.clusterList[x][0]:
                    del self.clusterList[x]
                    break
                x += 1

            clusterDict = {}
            x = 0
            for item in self.clusterList: # create dictionary to write
                clusterDict[str(x)]= {'name': item[0], 'username': item[1], 'password': item[2], 'controlIP': item[3], 'port': item[4], 'manageIPs': item[5]}
                x += 1

            with open(resource_path('cluster.txt'), 'w') as file: # Write to file
                json.dump(clusterDict, file)

            with open('cluster.encrypted', 'wb') as file:
                with open(resource_path('cluster.txt'), 'r') as file2:
                    file.write(self.key.encrypt(file2.read().encode()))

    def useClusterListSelection(self, event):
        selectionIndex = self.clusterListBox.GetSelection()
        if selectionIndex != -1:
            Publisher.sendMessage('clusterSelection', cluster = self.clusterList[selectionIndex])

class MyApp(wx.App):
    def OnInit(self):
        self.menuFrame = menuOptionsUI(None, wx.ID_ANY, "")
        
        self.menuFrame.Show()
        return True

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
    app.menuFrame.Show()

